import java.util.Properties

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    namespace = "com.example.android_project"
    compileSdk = 35

    // Cargar propiedades del keystore solo si existe
    def keystorePropertiesFile = rootProject.file("keystore.properties")
    def keystoreProperties = new Properties()
    if (keystorePropertiesFile.exists()) {
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    }

    defaultConfig {
        applicationId = "com.example.android_project"
        minSdk = 26
        targetSdk = 35
        versionCode = 1
        versionName = "1.0"
        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release {
            if (keystorePropertiesFile.exists()) {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
            } else {
                // Evitar error en CI: usar una configuración vacía
                println("⚠️ No se encontró keystore.properties. Se usará debug keystore.")
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled = false
            signingConfig signingConfigs.release
            proguardFiles(
                    getDefaultProguardFile("proguard-android-optimize.txt"),
                    "proguard-rules.pro"
            )
        }
        debug {
            // Solo usa release keystore si existe
            if (keystorePropertiesFile.exists()) {
                signingConfig signingConfigs.release
            } else {
                // Usa la firma debug por defecto (segura para CI)
                println("ℹ️ Usando firma debug por defecto")
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = '11'
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion '1.5.15'
    }

    packaging {
        jniLibs {
            useLegacyPackaging = false
        }
    }
}
